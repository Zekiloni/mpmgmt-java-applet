/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mobileplanmgmt.presentation.view;

import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import mobileplanmgmt.domain.model.Customer;
import mobileplanmgmt.domain.model.CustomerCreate;
import mobileplanmgmt.domain.model.MobilePlan;
import mobileplanmgmt.domain.model.MobilePlanCreate;
import mobileplanmgmt.domain.model.Subscription;
import mobileplanmgmt.domain.model.SubscriptionCreate;
import mobileplanmgmt.presentation.controller.CustomerController;
import mobileplanmgmt.presentation.controller.MobilePlanController;
import mobileplanmgmt.presentation.controller.SubscriptionController;
import static mobileplanmgmt.util.ValidationUtil.isValidDoubleInput;
import static mobileplanmgmt.util.ValidationUtil.isValidInput;
import static mobileplanmgmt.util.ValidationUtil.isValidIntegerInput;

/**
 *
 * @author Comp
 */
public class MainView extends javax.swing.JFrame {

    private MobilePlanController mobilePlanController;

    private CustomerController customerController;

    private SubscriptionController subscriptionController;

    private LocalDate subscriptionValidFrom = LocalDate.now();

    private LocalDate subscriptionValidTo = LocalDate.now();

    /**
     * Creates new form MainView
     */
    public MainView() {
        this.mobilePlanController = new MobilePlanController();
        this.customerController = new CustomerController();
        this.subscriptionController = new SubscriptionController();

        this.initComponents();

        this.refreshCustomersTable();
        this.refreshMobilePlansTable();
        this.refreshSubscriptionsTable();

        this.refreshCustomerChoices();
        this.refreshMobilePlansChoices();
        this.refreshSubscriptionsTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPanel = new javax.swing.JTabbedPane();
        mobilePlansPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mobilePlansTable = new javax.swing.JTable();
        mobilePlanNameInput = new javax.swing.JTextField();
        mobilePlanNameLabel = new javax.swing.JLabel();
        mobilePlanNameLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        mobilePlanDescInput = new javax.swing.JTextArea();
        dataLimitInput = new javax.swing.JTextField();
        minutesLimitInput = new javax.swing.JTextField();
        monthlyFeeInput = new javax.swing.JTextField();
        dataLimitLabel = new javax.swing.JLabel();
        minutesLimitLabel = new javax.swing.JLabel();
        monthlyFeeLabel = new javax.swing.JLabel();
        submitCreateMobilePlanButton = new javax.swing.JButton();
        customersPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        customersTable = new javax.swing.JTable();
        firstNameLabel = new javax.swing.JLabel();
        firstNameInput = new javax.swing.JTextField();
        lastNameLabel = new javax.swing.JLabel();
        lastNameInput = new javax.swing.JTextField();
        middleNameLabel = new javax.swing.JLabel();
        middleNameInput = new javax.swing.JTextField();
        dateOfBirthLabel = new javax.swing.JLabel();
        emailInput = new javax.swing.JTextField();
        emailLabel = new javax.swing.JLabel();
        phoneNumberInput = new javax.swing.JTextField();
        phoneNumberLabel = new javax.swing.JLabel();
        submitCustomerCreateButton = new javax.swing.JButton();
        dateOfBirthInput = new com.toedter.calendar.JCalendar();
        subscriptionsPanel = new javax.swing.JPanel();
        mobilePlanChoiceLabel = new javax.swing.JLabel();
        customerChoiceInput = new java.awt.Choice();
        customerChoiceLabel = new javax.swing.JLabel();
        mobilePlanChoiceInput = new java.awt.Choice();
        validToInput = new com.toedter.calendar.JCalendar();
        validToLabel = new javax.swing.JLabel();
        validFromLabel1 = new javax.swing.JLabel();
        validFromInput = new com.toedter.calendar.JCalendar();
        submitCreateSubscriptionButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        subscriptionsTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mobilePlansTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Description", "Data limit", "Minutes limit", "Monthly Fee", "Active subscriptions", "Created at", "Updated at"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(mobilePlansTable);

        mobilePlanNameInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mobilePlanNameInputActionPerformed(evt);
            }
        });

        mobilePlanNameLabel.setText("Description");

        mobilePlanNameLabel1.setText("Name");

        mobilePlanDescInput.setColumns(20);
        mobilePlanDescInput.setRows(5);
        jScrollPane2.setViewportView(mobilePlanDescInput);

        dataLimitInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataLimitInputActionPerformed(evt);
            }
        });

        minutesLimitInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minutesLimitInputActionPerformed(evt);
            }
        });

        monthlyFeeInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthlyFeeInputActionPerformed(evt);
            }
        });

        dataLimitLabel.setText("Data limit  (MB)");

        minutesLimitLabel.setText("Minutes limit");

        monthlyFeeLabel.setText("Monthly Fee ($)");

        submitCreateMobilePlanButton.setText("Create mobile plan");
        submitCreateMobilePlanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitCreateMobilePlanButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mobilePlansPanelLayout = new javax.swing.GroupLayout(mobilePlansPanel);
        mobilePlansPanel.setLayout(mobilePlansPanelLayout);
        mobilePlansPanelLayout.setHorizontalGroup(
            mobilePlansPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mobilePlansPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(mobilePlansPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(submitCreateMobilePlanButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mobilePlansPanelLayout.createSequentialGroup()
                        .addGroup(mobilePlansPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dataLimitInput, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dataLimitLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(mobilePlansPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(minutesLimitLabel)
                            .addComponent(minutesLimitInput, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(mobilePlansPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(monthlyFeeLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(monthlyFeeInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mobilePlansPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(mobilePlanNameLabel1)
                        .addComponent(mobilePlanNameLabel)
                        .addComponent(mobilePlanNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        mobilePlansPanelLayout.setVerticalGroup(
            mobilePlansPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mobilePlansPanelLayout.createSequentialGroup()
                .addGroup(mobilePlansPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mobilePlansPanelLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(mobilePlanNameLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mobilePlanNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mobilePlanNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mobilePlansPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dataLimitLabel)
                            .addComponent(minutesLimitLabel)
                            .addComponent(monthlyFeeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mobilePlansPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dataLimitInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(minutesLimitInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(monthlyFeeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addComponent(submitCreateMobilePlanButton))
                    .addGroup(mobilePlansPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(391, Short.MAX_VALUE))
        );

        tabbedPanel.addTab("Mobile plans", mobilePlansPanel);

        customersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "First name", "Last name", "Middle name", "DOB", "Phone No.", "E-mail", "Created at"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(customersTable);

        firstNameLabel.setText("First name");

        lastNameLabel.setText("Last name");

        middleNameLabel.setText("Middle name");

        dateOfBirthLabel.setText("Date of birth");

        emailLabel.setText("E-mail");

        phoneNumberLabel.setText("Phone Number");

        submitCustomerCreateButton.setText("Create a customer");
        submitCustomerCreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitCustomerCreateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout customersPanelLayout = new javax.swing.GroupLayout(customersPanel);
        customersPanel.setLayout(customersPanelLayout);
        customersPanelLayout.setHorizontalGroup(
            customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 574, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customersPanelLayout.createSequentialGroup()
                        .addGroup(customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(firstNameLabel)
                            .addComponent(firstNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lastNameLabel)
                            .addComponent(lastNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(customersPanelLayout.createSequentialGroup()
                                .addComponent(middleNameLabel)
                                .addGap(0, 49, Short.MAX_VALUE))
                            .addComponent(middleNameInput))
                        .addContainerGap())
                    .addGroup(customersPanelLayout.createSequentialGroup()
                        .addGroup(customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateOfBirthLabel)
                            .addComponent(dateOfBirthInput, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customersPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(submitCustomerCreateButton))
                            .addGroup(customersPanelLayout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(phoneNumberInput)
                                    .addComponent(emailInput, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(customersPanelLayout.createSequentialGroup()
                                        .addGroup(customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(emailLabel)
                                            .addComponent(phoneNumberLabel))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())))))
        );
        customersPanelLayout.setVerticalGroup(
            customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customersPanelLayout.createSequentialGroup()
                .addGroup(customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customersPanelLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, customersPanelLayout.createSequentialGroup()
                                .addComponent(lastNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lastNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(customersPanelLayout.createSequentialGroup()
                                .addComponent(firstNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(firstNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(customersPanelLayout.createSequentialGroup()
                                .addComponent(middleNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(middleNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(customersPanelLayout.createSequentialGroup()
                                .addComponent(dateOfBirthLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dateOfBirthInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(customersPanelLayout.createSequentialGroup()
                                .addComponent(emailLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(emailInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(phoneNumberLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(phoneNumberInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(submitCustomerCreateButton))))
                    .addGroup(customersPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(426, Short.MAX_VALUE))
        );

        tabbedPanel.addTab("Customers", customersPanel);

        mobilePlanChoiceLabel.setText("Select a Mobile Plan");

        customerChoiceLabel.setText("Select a Customer");

        validToInput.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                validToInputPropertyChange(evt);
            }
        });

        validToLabel.setText("Valid to date");

        validFromLabel1.setText("Valid from date");

        validFromInput.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                validFromInputPropertyChange(evt);
            }
        });

        submitCreateSubscriptionButton.setText("Create a Subscription");
        submitCreateSubscriptionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitCreateSubscriptionButtonActionPerformed(evt);
            }
        });

        subscriptionsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Customer", "Mobile Plan", "Valid From", "Valid Until", "Is Active"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(subscriptionsTable);

        javax.swing.GroupLayout subscriptionsPanelLayout = new javax.swing.GroupLayout(subscriptionsPanel);
        subscriptionsPanel.setLayout(subscriptionsPanelLayout);
        subscriptionsPanelLayout.setHorizontalGroup(
            subscriptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subscriptionsPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(subscriptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customerChoiceLabel)
                    .addComponent(customerChoiceInput, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(validFromLabel1)
                    .addComponent(validFromInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(subscriptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mobilePlanChoiceLabel)
                    .addComponent(mobilePlanChoiceInput, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(subscriptionsPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(subscriptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(submitCreateSubscriptionButton)
                            .addGroup(subscriptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(validToLabel)
                                .addComponent(validToInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        subscriptionsPanelLayout.setVerticalGroup(
            subscriptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subscriptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(subscriptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(subscriptionsPanelLayout.createSequentialGroup()
                        .addGroup(subscriptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(subscriptionsPanelLayout.createSequentialGroup()
                                .addComponent(customerChoiceLabel)
                                .addGap(1, 1, 1)
                                .addComponent(customerChoiceInput, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(subscriptionsPanelLayout.createSequentialGroup()
                                .addComponent(mobilePlanChoiceLabel)
                                .addGap(1, 1, 1)
                                .addComponent(mobilePlanChoiceInput, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(subscriptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(validFromLabel1)
                            .addComponent(validToLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(subscriptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(validFromInput, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(validToInput, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(submitCreateSubscriptionButton)
                .addContainerGap(371, Short.MAX_VALUE))
        );

        tabbedPanel.addTab("Subscriptions", subscriptionsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPanel)
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tabbedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mobilePlanNameInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mobilePlanNameInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mobilePlanNameInputActionPerformed

    private void dataLimitInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataLimitInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dataLimitInputActionPerformed

    private void minutesLimitInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minutesLimitInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minutesLimitInputActionPerformed

    private void monthlyFeeInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthlyFeeInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_monthlyFeeInputActionPerformed

    private void submitCustomerCreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitCustomerCreateButtonActionPerformed
        ArrayList<Boolean> validations = new ArrayList();

        validations.add(isValidInput(this.firstNameInput, input -> !input.isEmpty()));
        validations.add(isValidInput(this.lastNameInput, input -> !input.isEmpty()));
        validations.add(isValidInput(this.emailInput, input -> !input.isEmpty()));

        Date dobDate = this.dateOfBirthInput.getDate();

        if (validations.stream().allMatch(b -> b)) {
            CustomerCreate customerCreate = CustomerCreate.builder()
                    .firstName(this.firstNameInput.getText())
                    .lastName(this.lastNameInput.getText())
                    .middleName(this.middleNameInput.getText())
                    .emailAddress(this.emailInput.getText())
                    .phoneNumber(this.phoneNumberInput.getText())
                    .dateOfBirth(dobDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate())
                    .build();

            Customer customer = this.customerController.createCustomer(customerCreate);
            if (customer != null) {
                this.refreshCustomersTable();
                this.refreshCustomerChoices();
            }
        }
    }//GEN-LAST:event_submitCustomerCreateButtonActionPerformed

    private void submitCreateSubscriptionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitCreateSubscriptionButtonActionPerformed
        MobilePlan mobilePlan = this.mobilePlanController.getMobilePlan(Long.parseLong(this.mobilePlanChoiceInput.getSelectedItem()));
        Customer customer = this.customerController.getCustomer(Long.parseLong(this.customerChoiceInput.getSelectedItem()));

        if (mobilePlan != null && customer != null) {
            SubscriptionCreate subscriptionCreate = SubscriptionCreate.builder()
                    .mobilePlan(mobilePlan)
                    .customer(customer)
                    .validFrom(subscriptionValidFrom)
                    .validTo(subscriptionValidTo)
                    .build();

            this.subscriptionController.createSubscription(subscriptionCreate);
            this.refreshSubscriptionsTable();
            this.refreshMobilePlansTable();
        }
    }//GEN-LAST:event_submitCreateSubscriptionButtonActionPerformed

    private void validFromInputPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_validFromInputPropertyChange
        if (evt.getNewValue() instanceof GregorianCalendar) {
            GregorianCalendar calendar = (GregorianCalendar) evt.getNewValue();
            System.out.print("its gregorian");
            this.subscriptionValidFrom = calendar.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        }
    }//GEN-LAST:event_validFromInputPropertyChange

    private void validToInputPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_validToInputPropertyChange
        if (evt.getNewValue() instanceof GregorianCalendar) {
            GregorianCalendar calendar = (GregorianCalendar) evt.getNewValue();
            this.subscriptionValidTo = calendar.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        }
    }//GEN-LAST:event_validToInputPropertyChange

    private void submitCreateMobilePlanButtonActionPerformed(java.awt.event.ActionEvent evt) {
        ArrayList<Boolean> validations = new ArrayList();

        validations.add(isValidInput(this.mobilePlanNameInput, input -> !input.isEmpty()));
        validations.add(isValidInput(this.dataLimitInput, input -> isValidIntegerInput(input)));
        validations.add(isValidInput(this.minutesLimitInput, input -> isValidIntegerInput(input)));
        validations.add(isValidInput(this.monthlyFeeInput, input -> isValidDoubleInput(input)));

        if (validations.stream().allMatch(b -> b)) {
            MobilePlanCreate mobilePlanCreate = MobilePlanCreate.builder()
                    .name(this.mobilePlanNameInput.getText())
                    .description(this.mobilePlanDescInput.getText())
                    .dataLimit(Integer.parseInt(this.dataLimitInput.getText()))
                    .minutesLimit(Integer.parseInt(this.minutesLimitInput.getText()))
                    .monthlyFee(Double.parseDouble(this.monthlyFeeInput.getText()))
                    .build();

            MobilePlan mobilePlan = this.mobilePlanController.createMobilePlan(mobilePlanCreate);
            if (mobilePlan != null) {
                this.refreshMobilePlansTable();
                this.refreshMobilePlansChoices();
            }
        }
    }

    private void refreshMobilePlansTable() {
        try {
            DefaultTableModel tableModel = (DefaultTableModel) this.mobilePlansTable.getModel();
            tableModel.setRowCount(0);

            for (MobilePlan mobilePlan : this.mobilePlanController.getAllMobilePlans()) {
                tableModel.addRow(new Object[]{
                    mobilePlan.getId(),
                    mobilePlan.getName(),
                    mobilePlan.getDescription(),
                    mobilePlan.getDataLimit(),
                    mobilePlan.getMinutesLimit(),
                    mobilePlan.getMonthlyFee(),
                    mobilePlan.getActiveSubscriptions(),
                    mobilePlan.getCreatedAt(),
                    mobilePlan.getUpdatedAt()
                });
            }
        } catch (RuntimeException exception) {
            throw exception;
        }
    }

    private void refreshCustomersTable() {
        try {
            DefaultTableModel tableModel = (DefaultTableModel) this.customersTable.getModel();
            tableModel.setRowCount(0);

            for (Customer customer : this.customerController.getAllCustomers()) {
                tableModel.addRow(new Object[]{
                    customer.getId(),
                    customer.getFirstName(),
                    customer.getLastName(),
                    customer.getMiddleName(),
                    customer.getDateOfBirth(),
                    customer.getPhoneNumber(),
                    customer.getEmailAddress(),
                    customer.getCreatedAt()
                });
            }
        } catch (RuntimeException exception) {
            throw exception;
        }
    }

    private void refreshSubscriptionsTable() {
        DefaultTableModel tableModel = (DefaultTableModel) this.subscriptionsTable.getModel();
        tableModel.setRowCount(0);

        for (Subscription subscription : this.subscriptionController.getAllSubscriptions()) {
            tableModel.addRow(new Object[]{
                subscription.getId(),
                subscription.getCustomer().getFullName(),
                subscription.getMobilePlan().getName(),
                subscription.getValidFrom(),
                subscription.getValidTo(),
                subscription.getIsActive()
            });
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collafirstNameInputpsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Choice customerChoiceInput;
    private javax.swing.JLabel customerChoiceLabel;
    private javax.swing.JPanel customersPanel;
    private javax.swing.JTable customersTable;
    private javax.swing.JTextField dataLimitInput;
    private javax.swing.JLabel dataLimitLabel;
    private com.toedter.calendar.JCalendar dateOfBirthInput;
    private javax.swing.JLabel dateOfBirthLabel;
    private javax.swing.JTextField emailInput;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField firstNameInput;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField lastNameInput;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JTextField middleNameInput;
    private javax.swing.JLabel middleNameLabel;
    private javax.swing.JTextField minutesLimitInput;
    private javax.swing.JLabel minutesLimitLabel;
    private java.awt.Choice mobilePlanChoiceInput;
    private javax.swing.JLabel mobilePlanChoiceLabel;
    private javax.swing.JTextArea mobilePlanDescInput;
    private javax.swing.JTextField mobilePlanNameInput;
    private javax.swing.JLabel mobilePlanNameLabel;
    private javax.swing.JLabel mobilePlanNameLabel1;
    private javax.swing.JPanel mobilePlansPanel;
    private javax.swing.JTable mobilePlansTable;
    private javax.swing.JTextField monthlyFeeInput;
    private javax.swing.JLabel monthlyFeeLabel;
    private javax.swing.JTextField phoneNumberInput;
    private javax.swing.JLabel phoneNumberLabel;
    private javax.swing.JButton submitCreateMobilePlanButton;
    private javax.swing.JButton submitCreateSubscriptionButton;
    private javax.swing.JButton submitCustomerCreateButton;
    private javax.swing.JPanel subscriptionsPanel;
    private javax.swing.JTable subscriptionsTable;
    private javax.swing.JTabbedPane tabbedPanel;
    private com.toedter.calendar.JCalendar validFromInput;
    private javax.swing.JLabel validFromLabel1;
    private com.toedter.calendar.JCalendar validToInput;
    private javax.swing.JLabel validToLabel;
    // End of variables declaration//GEN-END:variables

    private void refreshCustomerChoices() {
        for (Customer customer : this.customerController.getAllCustomers()) {
            this.customerChoiceInput.add(customer.getId().toString());
        }
    }

    private void refreshMobilePlansChoices() {
        for (MobilePlan mobilePlan : this.mobilePlanController.getAllMobilePlans()) {
            this.mobilePlanChoiceInput.add(mobilePlan.getId().toString());
        }
    }
}
